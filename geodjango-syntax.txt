from django.contrib.gis.measure import Distance
from django.contrib.gis.geos import *

### Distance queries

# distance = Distance(m=1)
# For the distance object, see
# https://docs.djangoproject.com/en/dev/ref/contrib/gis/measure/#supported-units
# NOTE: not supported by Spatialite. We need PostGIS to use real distance units

pt = fromstr('POINT(0 0)') # can use any geometry, not just points
distance = 1 # 1 degree lat/long - not an actual distance unit! (see above)
gis.Area.objects.filter(regions__distance_gt=(pt, distance))
gis.Area.objects.filter(regions__distance_lt=(pt, distance))

### Contains/intersects/disjoint queries

polygon = fromstr('POLYGON ((-122.25854 37.874881, -122.258488 37.874746, -122.2583 37.874789, -122.258353 37.874924, -122.25854 37.874881))')
polygon2 = gis.Area.objects.all()[0].regions

gis.Area.objects.filter(regions__contains=polygon)
gis.Area.objects.filter(regions__intersects=polygon)
gis.Area.objects.filter(regions__disjoint=polygon2)

### Filtering within a given building/floor
gis.buildings['Sutardja Dai Hall']['Floor4'].areas.filter(regions__contains=polygon)
# OR
gis.Area.objects.filter(regions__contains=polygon, floor__building__name='Sutardja Dai Hall', floor__name='Floor 4')

# TODO: 'Floor4' vs 'Floor 4'. Which should we use?

### Getting nodes from a list of areas
p = Parser()
areas = gis.Area.objects.all() # Or any of the above filters
p.areas_to_nodes(areas)

nodes = Node.NodeList(node1, node2, ...)
# OR
nodes = p.areas_to_nodes(areas)
areas = nodes.areas
